package com.dieend.adin.generated.aspect;
#macro(args $parameters)
#foreach($variable in $parameters)
$variable.getSimpleName()#if($foreach.hasNext), #end
#end#end
#macro(type $parameters)
#foreach($type in $parameters)
$type.asType().toString()#if($foreach.hasNext), #end
#end)#end

#macro(type_and_var $parameters)
#foreach($type in $parameters)
, $type.asType() $type.getSimpleName()
#end#end

public privileged aspect SplittingAspect {
#foreach($method in $methods)
    #set( $concern = $concerns[$foreach.index].getQualifiedName().toString() )
    #set( $return = $returnTypes[$foreach.index] )
    #set( $methodName = $method.getSimpleName().toString() )
    #set( $alternateMethod = $alternateMethods[$foreach.index] )
    $return around($concern instance #type_and_var($method.getParameters()) ) : 
        target(instance) &&  
        call($return ${concern}.${methodName}(#type($method.getParameters() )) #if($method.getParameters().size() > 0)&&
        args(#args($method.getParameters()))
        #end{
        switch(com.dieend.example.whichlayouttab.Splitter.whichVersioN()) {
            case 1:
                #if($return!="void")return #end
proceed(instance#if($method.getParameters().size() > 0),#end #args($method.getParameters()));
                #if($return=="void")break; #end
            default:
                #if($return!="void")return #end
instance.${alternateMethod}(#args($method.getParameters()));
                #if($return=="void")break; #end
        }
    }
#end
}
